# Django To-Do List 튜토리얼 정리

## 📝 문제 해결 과정

| 단계 | 문제 발생 이유 | 해결 방법 |
|------|----------------|------------|
| **1. TemplateDoesNotExist 오류** | `todo/index.html` 템플릿 파일이 Django가 찾을 수 있는 위치에 없거나, 경로 설정이 잘못됨. | 1. `todo/templates/todo/index.html` 파일이 있는지 확인.<br>2. `settings.py`에서 `TEMPLATES` 설정 점검 (`APP_DIRS: True` 확인).<br>3. 뷰에서 올바른 템플릿 경로(`todo/index.html`)를 렌더링하도록 확인. |
| **2. OperationalError: no such table: todo_todo** | `todo` 앱의 `Todo` 모델이 정의되었으나, 데이터베이스에 테이블(`todo_todo`)이 생성되지 않음. 마이그레이션이 누락됨. | 1. `todo/models.py`에 `Todo` 모델이 정의되었는지 확인.<br>2. `python manage.py makemigrations` 실행하여 마이그레이션 파일 생성.<br>3. `python manage.py migrate` 실행하여 테이블 생성. |
| **3. 마이그레이션 적용 실패** | `migrate`를 실행했으나 `todo` 앱의 마이그레이션이 반영되지 않음. 모델 변경 사항이 마이그레이션 파일로 생성되지 않은 상태. | 1. `python manage.py makemigrations`로 `todo` 앱의 마이그레이션 파일 생성.<br>2. `python manage.py migrate`로 데이터베이스에 적용.<br>3. `INSTALLED_APPS`에 `todo` 앱이 등록되었는지 확인. |
| **4. 최종 확인** | 위 단계를 수행하지 않아 데이터베이스와 템플릿이 제대로 연결되지 않음. | 1. 모든 수정 후 서버 재시작(`python manage.py runserver`).<br>2. `http://127.0.0.1:8000/` 접속으로 작동 확인. |

---

## 💡 느낀 점

- **버전 호환 문제**는 역시 `venv` 가상환경에서 진행하는 게 속편하다…!
- **경로**는 한글이 없는 곳에서 진행할 것….!

---

## 🔗 참고 자료
- [GeeksforGeeks - Django To-Do Web App](https://www.geeksforgeeks.org/python-todo-webapp-using-django/)



```
### index.html
<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>

  <meta charset="utf-8">
  <title>{{title}}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <!--style-->
  <style>
  .card {

   box-shadow: 0 4px 8px 0 rgba(0,0,0,0.5),
               0 6px 20px 0 rgba(0,0,0,0.39);
   background: lightpink;
   margin-bottom : 5%;
   border-radius: 25px;
   padding : 2%;
   overflow: auto;
   resize: both;
   text-overflow: ellipsis;
  }
  .card:hover{
    background: lightblue;
  }

  .submit_form{

    text-align: center;
    padding: 3%;
    background: pink;
    border-radius: 25px;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.4),
                0 6px 20px 0 rgba(0,0,0,0.36);
  }
  </style>

</head>

<body  class="container-fluid">

  {% if messages %}
  {% for message in messages %}
  <div class="alert alert-info">
    <strong>{{message}}</strong>
  </div>
  {% endfor %}
  {% endif %}

  <center class="row">
    <h1><i>__TODO LIST__</i></h1>
    <hr />
  </center>

  <div class="row">

    <div class="col-md-8">

      {% for i in list %}
      <div class="card">
        <center><b>{{i.title}}</b></center>
        <hr/>
        {{i.date}}
        <hr/>
        {{i.details}}
        <br />
        <br />
        <form action="/del/{{i.id}}" method="POST" style=" padding-right: 4%; padding-bottom: 3%;">
          {% csrf_token %}
          <button value="remove" type="submit"  class="btn btn-primary" style="float: right;"><span class="glyphicon glyphicon-trash"></span> &nbsp; remove</button>
        </form>
      </div>
      {% endfor%}
    </div>
    <div class="col-md-1"> </div>
    <div class="col-md-3" >
      <div  class="submit_form">
      <form  method="POST">
        {% csrf_token %}
        {{forms}}
        <center>
        <input type="submit" class="btn btn-default" value="submit" />
      </center>
      </form>
    </div>
  </div>
</div>
</body>

</html>

```

```
#view.py
from django.shortcuts import render, redirect
from django.contrib import messages

# import todo form and models
from .forms import TodoForm
from .models import Todo

###############################################

def index(request):
    # Retrieve all Todo items in descending order by date
    item_list = Todo.objects.order_by("-date")
    if request.method == "POST":
        form = TodoForm(request.POST)
        if form.is_valid():
            form.save()
            # Redirect to the same page after saving the item
            return redirect('todo')
    form = TodoForm()

    # Pass data to the template
    page = {
        "forms": form,
        "list": item_list,
        "title": "TODO LIST",
    }
    return render(request, 'todo/index.html', page)

# Function to remove an item, receives todo item_id as primary key from URL
def remove(request, item_id):
    item = Todo.objects.get(id=item_id)
    item.delete()  # Delete the specific item
    messages.info(request, "Item removed!")  # Provide feedback to the user
    return redirect('todo')

```


```
#settings.py

"""
Django settings for todo_site project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-prmr1-5gr7w9_e#1xsdoshidc4xh5g*)9*(x=8nhezzqbks$43'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'todo',  # Add your app here
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'todo_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'todo_site/todo/templates'],  # 템플릿 경로 추가
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'todo_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

```


```
#urls

from django.contrib import admin
from django.urls import path
from todo import views

urlpatterns = [
    # Home page
    path('', views.index, name="todo"),

    # Delete a todo item (by id)
    path('delete/<int:item_id>/', views.remove, name="delete"),

    # Admin page
    path('admin/', admin.site.urls),
]

```
